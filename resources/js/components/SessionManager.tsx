import React, { useState, useCallback } from 'react';
import { useActivityTracker } from '../hooks/useActivityTracker';
import { useAuthContext } from '../contexts/AuthContextSimple';
import InactivityWarningModal from './InactivityWarningModal';

interface SessionManagerProps {
  children: React.ReactNode;
  /** Configuration du d√©lai d'inactivit√© */
  config?: {
    /** D√©lai d'inactivit√© en minutes (par d√©faut: 60 minutes = 1 heure) */
    inactivityTimeoutMinutes?: number;
    /** D√©lai d'avertissement en minutes avant d√©connexion (par d√©faut: 5 minutes) */
    warningTimeoutMinutes?: number;
    /** D√©sactiver le gestionnaire de session */
    disabled?: boolean;
  };
}

/**
 * Gestionnaire de session qui enveloppe l'application
 * 
 * Fonctionnalit√©s:
 * - Tracker l'activit√© utilisateur automatiquement
 * - Afficher un modal d'avertissement avant d√©connexion
 * - D√©connecter automatiquement apr√®s inactivit√©
 * - Permettre √† l'utilisateur d'√©tendre sa session
 * 
 * Usage:
 * ```tsx
 * <SessionManager config={{ inactivityTimeoutMinutes: 60 }}>
 *   <App />
 * </SessionManager>
 * ```
 */
export const SessionManager: React.FC<SessionManagerProps> = ({
  children,
  config = {},
}) => {
  const {
    inactivityTimeoutMinutes = 60, // 1 heure par d√©faut
    warningTimeoutMinutes = 5,     // 5 minutes d'avertissement
    disabled = false,
  } = config;

  const { isAuthenticated, logout } = useAuthContext();
  const [showWarningModal, setShowWarningModal] = useState(false);
  const [warningTimeRemaining, setWarningTimeRemaining] = useState(0);

  /**
   * Callback quand l'avertissement doit √™tre affich√©
   */
  const handleWarning = useCallback(() => {
    if (!isAuthenticated) return;
    
    console.info('‚ö†Ô∏è Avertissement de d√©connexion - Inactivit√© d√©tect√©e');
    setWarningTimeRemaining(warningTimeoutMinutes * 60 * 1000);
    setShowWarningModal(true);
  }, [isAuthenticated, warningTimeoutMinutes]);

  /**
   * Callback lors de la d√©connexion automatique
   */
  const handleAutoLogout = useCallback(() => {
    console.warn('üîí D√©connexion automatique pour inactivit√©');
    setShowWarningModal(false);
    
    // Le hook useActivityTracker s'occupe d√©j√† de la d√©connexion
    // Ce callback sert principalement pour les logs et notifications
  }, []);

  // Hook de tracker d'activit√©
  const { resetTimer, getTimeUntilLogout } = useActivityTracker({
    inactivityTimeout: inactivityTimeoutMinutes * 60 * 1000,
    warningTimeout: warningTimeoutMinutes * 60 * 1000,
    onWarning: handleWarning,
    onAutoLogout: handleAutoLogout,
    disabled: disabled || !isAuthenticated,
  });

  /**
   * √âtendre la session (r√©initialiser le timer)
   */
  const handleExtendSession = useCallback(() => {
    console.info('üîÑ Session √©tendue par l\'utilisateur');
    resetTimer();
    setShowWarningModal(false);
  }, [resetTimer]);

  /**
   * Fermer le modal d'avertissement
   */
  const handleCloseWarning = useCallback(() => {
    setShowWarningModal(false);
  }, []);

  /**
   * D√©connexion manuelle depuis le modal
   */
  const handleManualLogout = useCallback(async () => {
    console.info('üîì D√©connexion manuelle depuis le modal');
    setShowWarningModal(false);
    await logout();
  }, [logout]);

  // Ne pas afficher le gestionnaire si non authentifi√© ou d√©sactiv√©
  if (!isAuthenticated || disabled) {
    return <>{children}</>;
  }

  return (
    <>
      {children}
      
      {/* Modal d'avertissement d'inactivit√© */}
      <InactivityWarningModal
        isOpen={showWarningModal}
        onClose={handleCloseWarning}
        onExtendSession={handleExtendSession}
        onLogoutNow={handleManualLogout}
        timeRemaining={warningTimeRemaining}
        config={{
          title: "‚è∞ Session expire bient√¥t",
          description: `Vous allez √™tre d√©connect√© dans quelques minutes pour cause d'inactivit√© (${inactivityTimeoutMinutes} minutes sans activit√©).`,
          extendButtonText: "Continuer ma session",
          logoutButtonText: "Se d√©connecter maintenant",
          showLogoutButton: true,
        }}
      />
    </>
  );
};

export default SessionManager;

